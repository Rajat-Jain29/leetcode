/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>


#include <string>
#include <ctime>

class Block {
public:
    int index;
    std::string data;
    std::string hash;
    std::string previousHash;
    time_t timestamp;
    Block* next;

    Block(int index, std::string data, std::string previousHash, time_t timestamp) {
        this->index = index;
        this->data = data;
        this->previousHash = previousHash;
        this->timestamp = timestamp;
        this->next = nullptr;
        this->hash = calculateHash();
    }

    std::string calculateHash() {
        // perform some cryptographic hash function on the input string
        // ...
        // return the hash result as a string
        int random = rand()%100;
        // perform some cryptographic hash function on the hash string
        return std::to_string(random);
    }
};

class Blockchain {
public:
    Block* head;
    int size;

    Blockchain() {
        head = nullptr;
        size = 0;
    }

    void addBlock(std::string data) {
        if (head == nullptr) {
            // add the first block
            Block* newBlock = new Block(0, data, "0", time(0));
            head = newBlock;
            size++;
        } else {
            // add a new block to the end of the chain
            Block* currentBlock = head;
            while (currentBlock->next != nullptr) {
                currentBlock = currentBlock->next;
            }
            Block* newBlock = new Block(currentBlock->index + 1, data, currentBlock->hash, time(0));
            currentBlock->next = newBlock;
            size++;
        }
    }

    void printChain() {
        Block* currentBlock = head;
        while (currentBlock != nullptr) {
            std::cout << "Block " << currentBlock->index << ": " << currentBlock->data << std::endl;
            std::cout << "Hash: " << currentBlock->hash << std::endl;
            std::cout << "Previous Hash: " << currentBlock->previousHash << std::endl;
            std::cout << "Timestamp: " << currentBlock->timestamp << std::endl;
            std::cout << std::endl;
            currentBlock = currentBlock->next;
        }
    }
};

int main() {
    Blockchain blockchain;
    blockchain.addBlock("Hello, World!");
    blockchain.addBlock("How are you?");
    blockchain.addBlock("Goodbye!");
    blockchain.addBlock("Goodbye!");
    blockchain.printChain();
    return 0;
}

















==========================================================================

#include <iostream>
#include <string>
#include <ctime>
#include <sstream>

using namespace std;

// Block structure
struct Block {
    int index;
    string previousHash;
    string timestamp;
    string data;
    string hash;
    Block* next;

    // Constructor
    Block(int idx, string prevHash, string tstamp, string data) :
            index(idx), previousHash(move(prevHash)), timestamp(move(tstamp)), data(move(data)), next(nullptr) {
        hash = calculateHash();
    }

    // Calculate the hash for the block
    string calculateHash() const {
        string blockData = to_string(index) + previousHash + timestamp + data;
        int hashValue = 0;
        for (char c : blockData) {
            hashValue += static_cast<int>(c);
        }
        return to_string(hashValue);
    }
};

// Blockchain class
class Blockchain {
    
public:
    Block* head;
    Block* tail;

    // Constructor
    Blockchain() : head(nullptr), tail(nullptr) {}

    // Add a new block to the blockchain
    void addBlock(const string& data) {
        int index = tail ? tail->index + 1 : 0;
        string previousHash = tail ? tail->hash : "0";
        string timestamp = getCurrentTimestamp();

        Block* newBlock = new Block(index, previousHash, timestamp, data);
        if (!head) {
            head = newBlock;
        } else {
            tail->next = newBlock;
        }
        tail = newBlock;
    }

    // Get the last block in the blockchain
    Block getLastBlock() const {
        return *tail;
    }

    // Check if the blockchain is valid
    bool isChainValid() const {
        Block* currentBlock = head->next;
        Block* previousBlock = head;

        while (currentBlock) {
            // Check if the hash of the current block is valid
            if (currentBlock->hash != currentBlock->calculateHash()) {
                return false;
            }

            // Check if the previous hash of the current block matches the hash of the previous block
            if (currentBlock->previousHash != previousBlock->hash) {
                return false;
            }

            previousBlock = currentBlock;
            currentBlock = currentBlock->next;
        }
        return true;
    }

private:
    // Get the current timestamp as a string
    string getCurrentTimestamp() const {
        time_t currentTime = time(nullptr);
        return ctime(&currentTime);
    }
};

int main() {
    // Create a blockchain
    Blockchain blockchain;

    // Add blocks to the blockchain
    blockchain.addBlock("Data 1");
    blockchain.addBlock("Data 2");
    blockchain.addBlock("Data 3");

    // Print the blockchain
    Block* currentBlock = blockchain.head;
    while (currentBlock) {
        cout << "Block #" << currentBlock->index << "\n"
             << "Timestamp: " << currentBlock->timestamp
             << "Data: " << currentBlock->data << "\n"
             << "Hash: " << currentBlock->hash << "\n"
             << "Previous Hash: " << currentBlock->previousHash << "\n\n";
        currentBlock = currentBlock->next;
    }

    // Check if the blockchain is valid
    cout << "Is blockchain valid? " << (blockchain.isChainValid() ? "Yes" : "No") << endl;

    return 0;
}

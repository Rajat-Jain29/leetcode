class Solution {
public:
    void dfs(unordered_map<int,vector<int>> &m,int start, int end, bool &ans,vector<bool> &vis){
        if(start == end){
            ans = true;
            return;
        }
        
        vis[start] = true;
        for(auto it : m[start]){
            if(vis[it])
                continue;
            dfs(m,it,end,ans,vis);
        }
    }
    bool validPath(int n, vector<vector<int>>& edges, int start, int end) {
        if(start==end)
        {
            return true;
        }
        unordered_map<int,vector<int>>m;
        vector<bool>vis(n,false);
        for(int i=0;i<edges.size();i++){
            m[edges[i][0]].push_back(edges[i][1]);
           m[edges[i][1]].push_back(edges[i][0]);
        }
        bool ans = false;
        dfs(m,start,end,ans,vis);
        return ans;
    }
};

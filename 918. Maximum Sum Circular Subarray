class Solution {
public:
    int kadanemax(vector<int>num)
    {
        int maxnow = num[0], maxsum = INT_MIN;   
        if(num.size()<2) return num[0];
        
        for(int i=1; i<num.size(); i++)
        {
            maxnow += num[i];            
            if(maxnow < num[i]) maxnow = num[i];            
            if(maxsum < maxnow) maxsum = maxnow;            
        }
        
        return maxsum;        
    }
    
    int maxSubarraySumCircular(vector<int>& nums) 
    {
        int totsum = 0;
        
        for(int i=0; i<nums.size(); i++)
            totsum += nums[i];
        
        int kadone = kadanemax(nums);
        
        //Find the inverse of array and take the kadanes (min sum subarray)
        for(int i=0; i<nums.size(); i++)
            nums[i] = -nums[i];
        
        int kadtwo = kadanemax(nums);
        
        int circularsum = totsum + kadtwo;
        
        if( circularsum > kadone && circularsum!=0) return circularsum ;
        else return kadone;     
        
    }
};

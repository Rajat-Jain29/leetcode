class Solution {
public:
    void dfs( int i, vector<int> adj[],vector<int> &vis ){
        vis[i] = 1;
        for(auto it : adj[i]){
            if(!vis[it]){
                dfs(it,adj,vis);
            }
        }
    }
    int makeConnected(int n, vector<vector<int>>& connections) {
        vector<int> adj[n];
        int size = connections.size();
        if( size < n-1)
            return -1;
        for(int i=0;i<size;i++){
            adj[connections[i][0]].push_back(connections[i][1]);
            adj[connections[i][1]].push_back(connections[i][0]);
        }
        int c = 0;
        vector<int> vis(n,0);
        for(int i=0;i<n;i++){
            if(!vis[i]){
                c++;
                dfs(i,adj,vis);
            }
        }
        return c-1;
    }
};

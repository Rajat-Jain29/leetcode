/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
   
     TreeNode* solve(vector<int> &po,int pstart,int pend,vector<int> &in,int istart,int iend, map<int,int> &m){
        
        if(pstart > pend || istart > iend)
            return NULL;
        
        TreeNode *root = new TreeNode(po[pend]);
        int inroot = m[root->val];
        int numsleft =  inroot - istart;
        root -> left = solve(po,pstart,pstart+numsleft-1,in,istart,inroot-1,m);
        root -> right = solve(po,pstart+numsleft,pend-1,in,inroot+1,iend,m);
        return root;
        
        
        
        
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int,int> m;
        for(int i=0;i<inorder.size();i++){
            m[inorder[i]] = i;
        }
        TreeNode *root = solve(postorder,0,postorder.size()-1,inorder,0,inorder.size()-1,m);
        return root;
    }
    
};
